/* tslint:disable */
/* eslint-disable */
/**
 * Department Transports Api
 * Department Transports management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsuchy@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * Unique ID of the department
     * @type {string}
     * @memberof Department
     */
    'id': string;
    /**
     * Name of the department
     * @type {string}
     * @memberof Department
     */
    'name': string;
    /**
     * City where the department is located
     * @type {string}
     * @memberof Department
     */
    'city': string;
}
/**
 * Describes the mobility status of the patient for transport
 * @export
 * @interface MobilityStatus
 */
export interface MobilityStatus {
    /**
     * 
     * @type {string}
     * @memberof MobilityStatus
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof MobilityStatus
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof MobilityStatus
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Transport
 */
export interface Transport {
    /**
     * Unique ID of the transport in this transport list
     * @type {string}
     * @memberof Transport
     */
    'id': string;
    /**
     * Unique identifier of the patient - birth number
     * @type {string}
     * @memberof Transport
     */
    'patientId': string;
    /**
     * Name of patient in transports list
     * @type {string}
     * @memberof Transport
     */
    'patientName': string;
    /**
     * ID of the department from where the patient is being transported
     * @type {string}
     * @memberof Transport
     */
    'fromDepartmentId': string;
    /**
     * ID of the department to where the patient is being transported
     * @type {string}
     * @memberof Transport
     */
    'toDepartmentId': string;
    /**
     * Scheduled time of the transport
     * @type {string}
     * @memberof Transport
     */
    'scheduledDateTime': string;
    /**
     * Estimated duration of the transport in minutes
     * @type {number}
     * @memberof Transport
     */
    'estimatedDurationMinutes': number;
    /**
     * 
     * @type {MobilityStatus}
     * @memberof Transport
     */
    'mobilityStatus': MobilityStatus;
}

/**
 * DepartmentListApi - axios parameter creator
 * @export
 */
export const DepartmentListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to create a new department.
         * @summary Creates a new department
         * @param {string} departmentId Pass the ID of the particular department
         * @param {Department} department Department to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment: async (departmentId: string, department: Department, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('createDepartment', 'departmentId', departmentId)
            // verify required parameter 'department' is not null or undefined
            assertParamExists('createDepartment', 'department', department)
            const localVarPath = `/departments/{departmentId}`
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(department, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all departments
         * @summary Provides the list of all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using departmentId you can get details of a particular department
         * @summary Provides details about a specific department
         * @param {string} departmentId Pass the ID of the particular department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartment: async (departmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('getDepartment', 'departmentId', departmentId)
            const localVarPath = `/departments/{departmentId}`
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentListApi - functional programming interface
 * @export
 */
export const DepartmentListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to create a new department.
         * @summary Creates a new department
         * @param {string} departmentId Pass the ID of the particular department
         * @param {Department} department Department to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepartment(departmentId: string, department: Department, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepartment(departmentId, department, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of all departments
         * @summary Provides the list of all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDepartments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDepartments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using departmentId you can get details of a particular department
         * @summary Provides details about a specific department
         * @param {string} departmentId Pass the ID of the particular department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartment(departmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartment(departmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentListApi - factory interface
 * @export
 */
export const DepartmentListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentListApiFp(configuration)
    return {
        /**
         * Use this method to create a new department.
         * @summary Creates a new department
         * @param {string} departmentId Pass the ID of the particular department
         * @param {Department} department Department to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment(departmentId: string, department: Department, options?: any): AxiosPromise<Department> {
            return localVarFp.createDepartment(departmentId, department, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all departments
         * @summary Provides the list of all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments(options?: any): AxiosPromise<Array<Department>> {
            return localVarFp.getAllDepartments(options).then((request) => request(axios, basePath));
        },
        /**
         * By using departmentId you can get details of a particular department
         * @summary Provides details about a specific department
         * @param {string} departmentId Pass the ID of the particular department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartment(departmentId: string, options?: any): AxiosPromise<Department> {
            return localVarFp.getDepartment(departmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentListApi - interface
 * @export
 * @interface DepartmentListApi
 */
export interface DepartmentListApiInterface {
    /**
     * Use this method to create a new department.
     * @summary Creates a new department
     * @param {string} departmentId Pass the ID of the particular department
     * @param {Department} department Department to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentListApiInterface
     */
    createDepartment(departmentId: string, department: Department, options?: AxiosRequestConfig): AxiosPromise<Department>;

    /**
     * Retrieves a list of all departments
     * @summary Provides the list of all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentListApiInterface
     */
    getAllDepartments(options?: AxiosRequestConfig): AxiosPromise<Array<Department>>;

    /**
     * By using departmentId you can get details of a particular department
     * @summary Provides details about a specific department
     * @param {string} departmentId Pass the ID of the particular department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentListApiInterface
     */
    getDepartment(departmentId: string, options?: AxiosRequestConfig): AxiosPromise<Department>;

}

/**
 * DepartmentListApi - object-oriented interface
 * @export
 * @class DepartmentListApi
 * @extends {BaseAPI}
 */
export class DepartmentListApi extends BaseAPI implements DepartmentListApiInterface {
    /**
     * Use this method to create a new department.
     * @summary Creates a new department
     * @param {string} departmentId Pass the ID of the particular department
     * @param {Department} department Department to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentListApi
     */
    public createDepartment(departmentId: string, department: Department, options?: AxiosRequestConfig) {
        return DepartmentListApiFp(this.configuration).createDepartment(departmentId, department, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all departments
     * @summary Provides the list of all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentListApi
     */
    public getAllDepartments(options?: AxiosRequestConfig) {
        return DepartmentListApiFp(this.configuration).getAllDepartments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using departmentId you can get details of a particular department
     * @summary Provides details about a specific department
     * @param {string} departmentId Pass the ID of the particular department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentListApi
     */
    public getDepartment(departmentId: string, options?: AxiosRequestConfig) {
        return DepartmentListApiFp(this.configuration).getDepartment(departmentId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DepartmentTransportsListApi - axios parameter creator
 * @export
 */
export const DepartmentTransportsListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new transport into the list.
         * @summary Saves new transport into the list
         * @param {Transport} transport Transport to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransport: async (transport: Transport, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transport' is not null or undefined
            assertParamExists('createTransport', 'transport', transport)
            const localVarPath = `/transports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transport, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific transport from the list.
         * @summary Deletes specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransport: async (transportId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transportId' is not null or undefined
            assertParamExists('deleteTransport', 'transportId', transportId)
            const localVarPath = `/transports/{transportId}`
                .replace(`{${"transportId"}}`, encodeURIComponent(String(transportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using transportId you can get details of a particular transport. 
         * @summary Provides details about a specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransport: async (transportId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transportId' is not null or undefined
            assertParamExists('getTransport', 'transportId', transportId)
            const localVarPath = `/transports/{transportId}`
                .replace(`{${"transportId"}}`, encodeURIComponent(String(transportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using departmentId you get list of transports for chosen hospital department
         * @summary Provides the department transports list
         * @param {string} departmentId Pass the ID of the particular department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransportsList: async (departmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('getTransportsList', 'departmentId', departmentId)
            const localVarPath = `/departments/{departmentId}/transports`
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update the content of the transport.
         * @summary Updates specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {Transport} transport Transport to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransport: async (transportId: string, transport: Transport, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transportId' is not null or undefined
            assertParamExists('updateTransport', 'transportId', transportId)
            // verify required parameter 'transport' is not null or undefined
            assertParamExists('updateTransport', 'transport', transport)
            const localVarPath = `/transports/{transportId}`
                .replace(`{${"transportId"}}`, encodeURIComponent(String(transportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transport, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentTransportsListApi - functional programming interface
 * @export
 */
export const DepartmentTransportsListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentTransportsListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new transport into the list.
         * @summary Saves new transport into the list
         * @param {Transport} transport Transport to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransport(transport: Transport, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransport(transport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific transport from the list.
         * @summary Deletes specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransport(transportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTransport(transportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using transportId you can get details of a particular transport. 
         * @summary Provides details about a specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransport(transportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransport(transportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using departmentId you get list of transports for chosen hospital department
         * @summary Provides the department transports list
         * @param {string} departmentId Pass the ID of the particular department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransportsList(departmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransportsList(departmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update the content of the transport.
         * @summary Updates specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {Transport} transport Transport to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransport(transportId: string, transport: Transport, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransport(transportId, transport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentTransportsListApi - factory interface
 * @export
 */
export const DepartmentTransportsListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentTransportsListApiFp(configuration)
    return {
        /**
         * Use this method to store new transport into the list.
         * @summary Saves new transport into the list
         * @param {Transport} transport Transport to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransport(transport: Transport, options?: any): AxiosPromise<Transport> {
            return localVarFp.createTransport(transport, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific transport from the list.
         * @summary Deletes specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransport(transportId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTransport(transportId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using transportId you can get details of a particular transport. 
         * @summary Provides details about a specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransport(transportId: string, options?: any): AxiosPromise<Transport> {
            return localVarFp.getTransport(transportId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using departmentId you get list of transports for chosen hospital department
         * @summary Provides the department transports list
         * @param {string} departmentId Pass the ID of the particular department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransportsList(departmentId: string, options?: any): AxiosPromise<Array<Transport>> {
            return localVarFp.getTransportsList(departmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update the content of the transport.
         * @summary Updates specific transport
         * @param {string} transportId Pass the ID of the particular transport
         * @param {Transport} transport Transport to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransport(transportId: string, transport: Transport, options?: any): AxiosPromise<Transport> {
            return localVarFp.updateTransport(transportId, transport, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentTransportsListApi - interface
 * @export
 * @interface DepartmentTransportsListApi
 */
export interface DepartmentTransportsListApiInterface {
    /**
     * Use this method to store new transport into the list.
     * @summary Saves new transport into the list
     * @param {Transport} transport Transport to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApiInterface
     */
    createTransport(transport: Transport, options?: AxiosRequestConfig): AxiosPromise<Transport>;

    /**
     * Use this method to delete the specific transport from the list.
     * @summary Deletes specific transport
     * @param {string} transportId Pass the ID of the particular transport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApiInterface
     */
    deleteTransport(transportId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using transportId you can get details of a particular transport. 
     * @summary Provides details about a specific transport
     * @param {string} transportId Pass the ID of the particular transport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApiInterface
     */
    getTransport(transportId: string, options?: AxiosRequestConfig): AxiosPromise<Transport>;

    /**
     * By using departmentId you get list of transports for chosen hospital department
     * @summary Provides the department transports list
     * @param {string} departmentId Pass the ID of the particular department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApiInterface
     */
    getTransportsList(departmentId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Transport>>;

    /**
     * Use this method to update the content of the transport.
     * @summary Updates specific transport
     * @param {string} transportId Pass the ID of the particular transport
     * @param {Transport} transport Transport to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApiInterface
     */
    updateTransport(transportId: string, transport: Transport, options?: AxiosRequestConfig): AxiosPromise<Transport>;

}

/**
 * DepartmentTransportsListApi - object-oriented interface
 * @export
 * @class DepartmentTransportsListApi
 * @extends {BaseAPI}
 */
export class DepartmentTransportsListApi extends BaseAPI implements DepartmentTransportsListApiInterface {
    /**
     * Use this method to store new transport into the list.
     * @summary Saves new transport into the list
     * @param {Transport} transport Transport to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApi
     */
    public createTransport(transport: Transport, options?: AxiosRequestConfig) {
        return DepartmentTransportsListApiFp(this.configuration).createTransport(transport, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific transport from the list.
     * @summary Deletes specific transport
     * @param {string} transportId Pass the ID of the particular transport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApi
     */
    public deleteTransport(transportId: string, options?: AxiosRequestConfig) {
        return DepartmentTransportsListApiFp(this.configuration).deleteTransport(transportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using transportId you can get details of a particular transport. 
     * @summary Provides details about a specific transport
     * @param {string} transportId Pass the ID of the particular transport
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApi
     */
    public getTransport(transportId: string, options?: AxiosRequestConfig) {
        return DepartmentTransportsListApiFp(this.configuration).getTransport(transportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using departmentId you get list of transports for chosen hospital department
     * @summary Provides the department transports list
     * @param {string} departmentId Pass the ID of the particular department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApi
     */
    public getTransportsList(departmentId: string, options?: AxiosRequestConfig) {
        return DepartmentTransportsListApiFp(this.configuration).getTransportsList(departmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update the content of the transport.
     * @summary Updates specific transport
     * @param {string} transportId Pass the ID of the particular transport
     * @param {Transport} transport Transport to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentTransportsListApi
     */
    public updateTransport(transportId: string, transport: Transport, options?: AxiosRequestConfig) {
        return DepartmentTransportsListApiFp(this.configuration).updateTransport(transportId, transport, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MobilityStatusListApi - axios parameter creator
 * @export
 */
export const MobilityStatusListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides the list of predefined mobility statuses for patient transport
         * @summary Provides the list of mobility statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMobilityStatusList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mobility-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MobilityStatusListApi - functional programming interface
 * @export
 */
export const MobilityStatusListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MobilityStatusListApiAxiosParamCreator(configuration)
    return {
        /**
         * Provides the list of predefined mobility statuses for patient transport
         * @summary Provides the list of mobility statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMobilityStatusList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MobilityStatus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMobilityStatusList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MobilityStatusListApi - factory interface
 * @export
 */
export const MobilityStatusListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MobilityStatusListApiFp(configuration)
    return {
        /**
         * Provides the list of predefined mobility statuses for patient transport
         * @summary Provides the list of mobility statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMobilityStatusList(options?: any): AxiosPromise<Array<MobilityStatus>> {
            return localVarFp.getMobilityStatusList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MobilityStatusListApi - interface
 * @export
 * @interface MobilityStatusListApi
 */
export interface MobilityStatusListApiInterface {
    /**
     * Provides the list of predefined mobility statuses for patient transport
     * @summary Provides the list of mobility statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilityStatusListApiInterface
     */
    getMobilityStatusList(options?: AxiosRequestConfig): AxiosPromise<Array<MobilityStatus>>;

}

/**
 * MobilityStatusListApi - object-oriented interface
 * @export
 * @class MobilityStatusListApi
 * @extends {BaseAPI}
 */
export class MobilityStatusListApi extends BaseAPI implements MobilityStatusListApiInterface {
    /**
     * Provides the list of predefined mobility statuses for patient transport
     * @summary Provides the list of mobility statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MobilityStatusListApi
     */
    public getMobilityStatusList(options?: AxiosRequestConfig) {
        return MobilityStatusListApiFp(this.configuration).getMobilityStatusList(options).then((request) => request(this.axios, this.basePath));
    }
}


